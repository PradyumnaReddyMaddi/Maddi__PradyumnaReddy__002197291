/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package USER_INTERFACE;

import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.Period;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Date;
import java.util.Map;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import MAIN.CommunityClass;
import MAIN.PatientClass;
import MAIN.VitalSignsClass;

/**
 *
 * @author pradyumnareddy
 */
public class View_Patient_Data extends javax.swing.JPanel {

    /**
     * Creates new form View_Patient_Data
     */
    public View_Patient_Data() {
        initComponents();
        txtPatientId.setName("Patient_Id");
        txtPatientName.setName("Patient_Name");
        txtDate_of_birth.setName("Date_of_birth");
        txtCommunity_Id.setName("Community_Id");
        txtHouse_id.setName("House_Id");
        txtCity.setName("City");
        txtCommunity_Name.setName("Community_Name");
    }
            /*validateData() - Takes a JComponent as input - Perform validation if data received is valid*/
    public boolean validateData(JComponent input) {
        String name = input.getName();
        String errorMsg = "";
        boolean raiseError = false;
        String text = ((JTextField) input).getText().trim();
        if (text == null || text.isEmpty()) {
            raiseError = true;
            errorMsg = String.format("Please enter a value. The value for %s cannot be empty", name);

        } else {
            switch (name) {
                case "Patient_Name":
                case "House_Id":
                case "City":
                case "Community_Name":
                    if (!text.matches("^[a-zA-Z0-9]+$")) {
                        raiseError = true;
                        errorMsg = String.format("Please enter a valid %s", name);
                    }
                    break;
                case "Date_of_birth":
                    if (!text.matches("^([0-2][0-9]||3[0-1])/(0[0-9]||1[0-2])/([0-9][0-9])?[0-9][0-9]$")) {
                        raiseError = true;
                        errorMsg = String.format("Please enter a valid %s with the format DD/MM/YYYY", name);
                    }
                    break;
                case "Patient_Id":
                case "Community_Id":
                    if (!text.matches("^[0-9]+")) {
                        raiseError = true;
                        errorMsg = String.format("Please enter a valid %s", name);
                    }
                    break;
                default:
                    break;
            }
        }
        if (raiseError) {
            JOptionPane.showMessageDialog(this, errorMsg);
            return false;
        }
        return true;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtPatientId = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txtPatientName = new javax.swing.JTextField();
        txtDate_of_birth = new javax.swing.JTextField();
        txtCommunity_Id = new javax.swing.JTextField();
        txtCommunity_Name = new javax.swing.JTextField();
        txtHouse_id = new javax.swing.JTextField();
        txtCity = new javax.swing.JTextField();
        btnUpdate = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        txtPatient_Id_Search = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();

        setBackground(new java.awt.Color(204, 204, 204));
        setForeground(new java.awt.Color(102, 255, 255));

        jLabel1.setBackground(new java.awt.Color(153, 153, 0));
        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("View Patient Data");

        jLabel2.setText("Patient_ID");

        txtPatientId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPatientIdActionPerformed(evt);
            }
        });

        jLabel3.setText("Patient_Name");

        jLabel4.setText("Date_of_Birth");

        jLabel5.setText("Community_ID");

        jLabel6.setText("Community_Name");

        jLabel7.setText("House_ID");

        jLabel8.setText("City");

        txtCommunity_Id.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCommunity_IdActionPerformed(evt);
            }
        });

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        jLabel9.setText("Search_Patient_ID");

        txtPatient_Id_Search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPatient_Id_SearchActionPerformed(evt);
            }
        });

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(272, 272, 272)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel2))
                                .addGap(45, 45, 45)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel9)
                                        .addGap(12, 12, 12)
                                        .addComponent(txtPatient_Id_Search, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(btnSearch))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(70, 70, 70)
                                        .addComponent(btnUpdate))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(txtPatientId, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtDate_of_birth, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(48, 48, 48)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel5)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(txtCommunity_Id, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel3)
                                                .addGap(46, 46, 46)
                                                .addComponent(txtPatientName, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addComponent(jLabel7)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(txtHouse_id, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addComponent(jLabel8)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(txtCity, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(221, 221, 221))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtCommunity_Name, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(6, 6, 6)))))
                .addContainerGap(72, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnSearch, jLabel9, txtPatient_Id_Search});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addComponent(jLabel1)
                .addGap(55, 55, 55)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(txtPatient_Id_Search, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch))
                .addGap(62, 62, 62)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPatientId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(txtPatientName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtDate_of_birth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel4))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel5)
                        .addComponent(txtCommunity_Id, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCommunity_Name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtHouse_id, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(jLabel6))
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addGap(69, 69, 69)
                .addComponent(btnUpdate)
                .addContainerGap(164, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnSearch, jLabel9, txtPatient_Id_Search});

    }// </editor-fold>//GEN-END:initComponents

    private void txtPatientIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPatientIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPatientIdActionPerformed

    private void txtCommunity_IdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCommunity_IdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCommunity_IdActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        VitalSignsClass vs;
        PatientClass p;
        boolean patientExists;
        CommunityClass comm;

        int age=0;
        p = new PatientClass();
        ArrayList<VitalSignsClass> existedArray = new ArrayList<VitalSignsClass>();
        Map<PatientClass, ArrayList<VitalSignsClass>> map = PatientClass.getEncounterHistory();
        patientExists = false;
        for (PatientClass patient : map.keySet()) {
            if (Integer.parseInt(txtPatientId.getText()) == patient.getPatientId()) {
                patientExists = true;
                existedArray = map.get(patient);
                p = patient;
            }
        }
        JTextField[] VARIABLE_CONSTANTS = {txtPatientId,txtPatientName,txtDate_of_birth,txtCommunity_Id,txtCommunity_Name,txtHouse_id,txtCity};
        boolean validated = false;
            for (JTextField field : VARIABLE_CONSTANTS) {
                if (!validateData(field)) {
                    validated = false;
                    break;
                } else {
                    validated = true;
                    System.out.println("Validated");
                }
            }
        if (patientExists) {
            if (validated){
            comm = new CommunityClass();
            comm.setCommunityId(Integer.parseInt(txtCommunity_Id.getText()));
            comm.setCity(txtCity.getText());
            comm.setCommunityName(txtCommunity_Name.getText());
            comm.setHouseId(txtHouse_id.getText());
            String dob = txtDate_of_birth.getText();
            try {
                Date date = new SimpleDateFormat("dd/MM/yyyy").parse(dob);
                LocalDate ld = date.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
                Period period = Period.between(ld, LocalDate.now());
                age = (period.getYears() * 12) + period.getMonths();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(btnUpdate, "Enter date in the required format");
            }
            p.setAge(age);
            p.setDob(dob);
            p.setPatientId(Integer.parseInt(txtPatientId.getText()));
            p.setPatientName(txtPatientName.getText());
            p.setCommunity(comm);
            JOptionPane.showMessageDialog(btnUpdate, "Updated details successfully");
            }
        } else {
            JOptionPane.showMessageDialog(btnUpdate, "Patient does not exist");
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void txtPatient_Id_SearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPatient_Id_SearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPatient_Id_SearchActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        boolean patientExists;
        patientExists = false;
        Map<PatientClass, ArrayList<VitalSignsClass>> map = PatientClass.getEncounterHistory();
        for (PatientClass patient : map.keySet()) {
            if (Integer.parseInt(txtPatient_Id_Search.getText()) == patient.getPatientId()) {
                patientExists = true;
            }
        }
        if(!patientExists){
        JOptionPane.showMessageDialog(btnUpdate, "Patient does not exist");
        }
        else{
        for (PatientClass patient : map.keySet()) {
            if (Integer.parseInt(txtPatient_Id_Search.getText()) == patient.getPatientId()) {
                txtPatientId.setText(String.valueOf(patient.getPatientId()));
                txtPatientId.setEditable(false);
                txtPatientName.setText(patient.getPatientName());
                txtDate_of_birth.setText(patient.getDob());
                CommunityClass comm = new CommunityClass();
                comm = patient.getCommunity();
                txtCommunity_Id.setText(String.valueOf(comm.getCommunityId()));
                txtCommunity_Name.setText(comm.getCommunityName());
                txtHouse_id.setText(comm.getHouseId());
                txtCity.setText(comm.getCity());
                
            }
        }
        }
    }//GEN-LAST:event_btnSearchActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextField txtCity;
    private javax.swing.JTextField txtCommunity_Id;
    private javax.swing.JTextField txtCommunity_Name;
    private javax.swing.JTextField txtDate_of_birth;
    private javax.swing.JTextField txtHouse_id;
    private javax.swing.JTextField txtPatientId;
    private javax.swing.JTextField txtPatientName;
    private javax.swing.JTextField txtPatient_Id_Search;
    // End of variables declaration//GEN-END:variables
}
